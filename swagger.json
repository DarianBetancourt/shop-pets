{
  "swagger": "2.0",
  "info": {
    "description": "Para o administrador do site  de Pet Shop, que precisa manter um controle e conhecimento do estoque  , o Shopping dos Bichos é um sistema de gerenciamento e controle de estoque, que permite cadastrar e editar todos os itens e serviços da loja.",
    "version": "1.0.0",
    "title": "Shopping dos Bichos",
    "contact": {
      "email": "darianbetancourt8@gmail.com",
      "url": "https://benjaminarruebarrena.github.io/pagina-desarrolladores/"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Shopping dos Bichos",
      "description": "",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/Team-Developers-totti/ShoppingDosBichos"
      }
    },
    {
      "name": "store",
      "description": "Access to Petshop orders"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/product": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Finds products by status",
        "description": "Getting all products",
        "operationId": "findproducts",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/product"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Add a new product to the store",
        "description": "",
        "operationId": "addproduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "product object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/productCreate"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/product/{productId}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Find product by ID",
        "description": "Returns a single product",
        "operationId": "getproductById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "string",
            "format": "ObjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "product not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "product"
        ],
        "summary": "Deletes a product",
        "description": "",
        "operationId": "deleteproduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product id to delete",
            "required": true,
            "type": "string",
            "format": "ObjectId"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "product not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "product"
        ],
        "summary": "Update an existing product",
        "description": "",
        "operationId": "updateproduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "string",
            "format": "ObjectId"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "product not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/pet": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "description": "Getting all pets",
        "operationId": "findPets",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/pet/findByStatus/{status}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "description": "Getting pets for their status",
        "operationId": "findPetsByStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "default": "available"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "string",
            "format": "ObjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventory by status and products in stock",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet or product",
        "description": "",
        "operationId": "placeOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "",
        "operationId": "getOrderById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "string",
            "format": "ObjectId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderDetail"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "string",
            "format": "ObjectId"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get users",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllUser"
              }
            }
          },
          "400": {
            "description": "Error Getting Users"
          }
        }
      }
    },
    "/user/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "O usuario foi salvado com sucesso"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by id",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "user saved successfully"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User whit id {id} deleted"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "BasicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "id": {
      "type": "string",
      "format": "ObjectId",
      "example": "507f191e810c19729de860ea"
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/id"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "OrderDetail": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/Order"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/product"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/id"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "UserCreate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "UserLogin": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserLoged"
        },
        "token": {
          "type": "string",
          "format": "jwt",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MzQxMzI4MTYsImV4cCI6MTYzNDIxOTIxNn0.3AZAWc6kz9J2MSjpVSNI2RjYeiiwgCxiRn8JbG6aNDU"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "UserLoged": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/id"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "AllUser": {
      "$ref": "#/definitions/UserLoged"
    },
    "DescriptionPet": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        },
        "weight": {
          "type": "number"
        },
        "size": {
          "type": "string"
        },
        "age": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photo_urls"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/id"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "type_pet": {
          "type": "string",
          "example": "dog"
        },
        "breed": {
          "type": "string",
          "example": "Pitbull"
        },
        "description": {
          "$ref": "#/definitions/DescriptionPet"
        },
        "photo_urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "in_adoption": {
          "type": "boolean",
          "example": false
        },
        "price": {
          "type": "number",
          "example": 1600
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      }
    },
    "productCreate": {
      "type": "object",
      "required": [
        "name",
        "photoUrl"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "dorazel plus"
        },
        "description": {
          "type": "string",
          "example": "anti-garrapatas"
        },
        "category": {
          "type": "string",
          "example": "farmacia"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "photoUrl": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "http://exaple.com/imageexample.jpg"
          }
        },
        "stock": {
          "type": "number",
          "example": 100
        },
        "expirationDate": {
          "type": "string",
          "format": "date"
        },
        "price": {
          "type": "number",
          "example": 1600
        },
        "status": {
          "type": "string",
          "description": "product status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      }
    },
    "product": {
      "type": "object",
      "required": [
        "name",
        "photoUrl"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/id"
        },
        "name": {
          "type": "string",
          "example": "dorazel plus"
        },
        "description": {
          "type": "string",
          "example": "anti-garrapatas"
        },
        "category": {
          "type": "string",
          "example": "farmacia"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "photoUrl": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "http://exaple.com/imageexample.jpg"
          }
        },
        "stock": {
          "type": "number",
          "example": 100
        },
        "expirationDate": {
          "type": "string",
          "format": "date"
        },
        "price": {
          "type": "number",
          "example": 1600
        },
        "status": {
          "type": "string",
          "description": "product status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      }
    },
    "Inventory": {
      "type": "object",
      "properties": {
        "pets": {
          "$ref": "#/definitions/Pet"
        },
        "products": {
          "$ref": "#/definitions/product"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about ShoppingDosBichos",
    "url": "https://github.com/Team-Developers-totti/ShoppingDosBichos"
  }
}